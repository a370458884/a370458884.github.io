<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Be Here Now</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-09T07:27:50.227Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Css小知识点总结</title>
    <link href="http://yoursite.com/2017/10/05/Css%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/05/Css小知识点总结/</id>
    <published>2017-10-05T06:05:55.000Z</published>
    <updated>2018-02-09T07:27:50.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-不确定高宽情况下，写出正方形"><a href="#1-不确定高宽情况下，写出正方形" class="headerlink" title="(1) 不确定高宽情况下，写出正方形"></a>(1) 不确定高宽情况下，写出正方形</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"box"</span>&gt;&lt;/div&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 0;</span><br><span class="line">    padding-top: 100%;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>(2)字体图标 IconMoon(3)1px border 移动端实现(4)css sticky footers布局</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-不确定高宽情况下，写出正方形&quot;&gt;&lt;a href=&quot;#1-不确定高宽情况下，写出正方形&quot; class=&quot;headerlink&quot; title=&quot;(1) 不确定高宽情况下，写出正方形&quot;&gt;&lt;/a&gt;(1) 不确定高宽情况下，写出正方形&lt;/h2&gt;&lt;figure class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue小知识点总结</title>
    <link href="http://yoursite.com/2017/10/05/Vue%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/05/Vue小知识点总结/</id>
    <published>2017-10-05T06:05:55.000Z</published>
    <updated>2018-02-09T08:26:35.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="封装复用的js公用方法"><a href="#封装复用的js公用方法" class="headerlink" title="封装复用的js公用方法"></a>封装复用的js公用方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新建js模板 例 <span class="built_in">export</span> <span class="keyword">function</span> XXX方法名(参数)&#123; &#125; <span class="comment">#可多个</span></span><br><span class="line"></span><br><span class="line">在模块里 import &#123;XXX&#125; form 路径</span><br><span class="line"><span class="comment"># 在模块里 import &#123;XXX ，YYY&#125; form 路径 多个方法引入</span></span><br></pre></td></tr></table></figure><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><blockquote><p>所有的生命周期钩子自动绑定 this 到上下文实例中，可以访问当前数据，对属性和方法进行运算。<br>不能使用箭头函数来定义一个生命周期方法，因为箭头函数绑定了父上下文。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforecreate : 举个栗子：可以在这加个loading事件 </span><br><span class="line">created ：在这结束loading，还做一些初始化，实现函数自执行 </span><br><span class="line">mounted ： 在这发起后端请求，拿回数据，配合路由钩子做一些事情</span><br><span class="line">beforeDestory： 你确认删除XX吗？ destoryed ：当前组件已被删除，清空相关内容</span><br></pre></td></tr></table></figure><h2 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h2><blockquote><p>vue的组件作用域都是孤立的，不允许在子组件的模板内直接引用父组件的数据。必须使用特定的方法才能实现组件之间的数据传递。  </p></blockquote><h3 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h3><blockquote><p>使用props向子组件传递数据</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">子组件在props中创建一个属性，用以接收父组件传过来的值</span><br><span class="line">父组件中注册子组件</span><br><span class="line">在子组件标签中添加子组件props中创建的属性</span><br><span class="line">把需要传给子组件的值赋给该属性</span><br></pre></td></tr></table></figure><h3 id="子组件向父组件传递数据"><a href="#子组件向父组件传递数据" class="headerlink" title="子组件向父组件传递数据"></a>子组件向父组件传递数据</h3><blockquote><p>子组件主要通过事件传递数据给父组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">子组件中需要以某种方式例如点击事件的方法来触发一个自定义事件  </span><br><span class="line">将需要传的值作为<span class="variable">$emit</span>的第二个参数,该值将作为实参传给相应自定义事件的方法  </span><br><span class="line">在父组件中注册子组件并在子组件标签上绑定对自定义事件的监听 </span><br><span class="line"></span><br><span class="line">this.<span class="variable">$emit</span>(event,...args);</span><br><span class="line">/*</span><br><span class="line">* event: 要触发的事件</span><br><span class="line">* args: 将要传给父组件的参数</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p></blockquote><p>子组件中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div @click=<span class="string">"iclick"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">methods:&#123;</span><br><span class="line">    <span class="function"><span class="title">iclick</span></span>()&#123;</span><br><span class="line">        <span class="built_in">let</span> data = &#123;</span><br><span class="line">            a:<span class="string">'data'</span></span><br><span class="line">        &#125;;</span><br><span class="line">        this.<span class="variable">$emit</span>(<span class="string">'ievent'</span>,data,<span class="string">'lalala'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>父组件中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;i-template @ievent = <span class="string">"ievent"</span>&gt;&lt;/i-template&gt;</span><br><span class="line">methods:&#123;</span><br><span class="line">    ievent(...data)&#123;</span><br><span class="line">        console.log(<span class="string">'allData:'</span>,data);// data为包含传过来所有数据的数组，第一个元素是对象，第二个元素是字符串</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="父组件调用子组件方法"><a href="#父组件调用子组件方法" class="headerlink" title="父组件调用子组件方法"></a>父组件调用子组件方法</h2><p>父组件的子组件标签中 v-ref=’子组件名称’<br>js $.refs.子组件名称.方法</p><h2 id="父组件调用子组件-值"><a href="#父组件调用子组件-值" class="headerlink" title="父组件调用子组件 值"></a>父组件调用子组件 值</h2><p>子组件$.dispatch(方法名，值)<br>父组件events监听，events:{<br>  方法名(值){ 父组件需要关联的值}<br>}</p><p>管道符？<br>例<br>时间戳 | formatDate<br>组件里 filters: {<br> formatDate(time){<br>  方法执行 然后return<br> }<br>}</p><p>vue获得dom元素</p><p>@click.stop.prevent vue阻止冒泡</p><p>vue Dom渲染后</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;封装复用的js公用方法&quot;&gt;&lt;a href=&quot;#封装复用的js公用方法&quot; class=&quot;headerlink&quot; title=&quot;封装复用的js公用方法&quot;&gt;&lt;/a&gt;封装复用的js公用方法&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux基础(一)Git</title>
    <link href="http://yoursite.com/2017/09/05/Linux%E5%9F%BA%E7%A1%80(%E4%BA%8C)Git/"/>
    <id>http://yoursite.com/2017/09/05/Linux基础(二)Git/</id>
    <published>2017-09-05T06:24:50.000Z</published>
    <updated>2018-02-09T07:04:04.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><blockquote><p>开源的分布式版本控制系统</p></blockquote><h3 id="Git命令基础"><a href="#Git命令基础" class="headerlink" title="Git命令基础"></a>Git命令基础</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init 初始化当前目录为Git仓库 <span class="comment">#git init XXX 使用指定XXX目录作为Git仓库</span></span><br><span class="line">git add  添加文件 <span class="comment">#git add -all / git add -A 添加所有更改的文件</span></span><br><span class="line">git commit -m <span class="string">"remark"</span> 提交到本地仓库 <span class="comment">#git commit -a -m "remark" 命令的-a选项可将所有被修改或者已删除的且已经被git管理的文档提交到仓库中</span></span><br><span class="line"></span><br><span class="line">git config 配置信息 <span class="comment">#只需配置一次</span></span><br><span class="line">git status 查看仓库状态</span><br><span class="line">git <span class="built_in">log</span> 查看当前版本/存盘点/历史</span><br></pre></td></tr></table></figure><h3 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch+分支名 创建分支</span><br><span class="line">git checkout+文件名 切换分支 <span class="comment">#可以将暂存区的内容还原到工作区</span></span><br><span class="line">git merge 合并分支</span><br><span class="line"><span class="comment">#别忘了每次切换分支修改的时候要保存 提交</span></span><br></pre></td></tr></table></figure><h3 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push+远程仓库地址+分支名</span><br><span class="line">git pull+远程仓库地址+分支名</span><br><span class="line">git <span class="built_in">clone</span>+远程仓库地址 <span class="comment"># == mkdir目录 + cd目录下 + git init + git pull</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;开源的分布式版本控制系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Git命令基础&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux基础(一)基础</title>
    <link href="http://yoursite.com/2017/09/04/Linux%E5%9F%BA%E7%A1%80(%E4%B8%80)%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/09/04/Linux基础(一)基础/</id>
    <published>2017-09-04T07:40:45.000Z</published>
    <updated>2018-02-06T09:06:40.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><blockquote><p>命令解析器：接收用户命令，调用相应的应用程序。</p></blockquote><p>在计算机科学中，shell俗称<strong>‘壳’</strong>，区别于Kemel(核)。shell分为<strong>图形界面shell</strong>和<strong>命令行shell</strong>。各个shell功能差不多，Linux下默认使用bash。</p><h1 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h1><blockquote><p>bash 是一个为GNU计划编写的Unix shell。</p></blockquote><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p><code>命令 [-options] [参数], --help 查看帮助</code></p><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span>:        查看当前目录</span><br><span class="line"><span class="built_in">cd</span>:         切换目录 <span class="comment">#./为当前目录，../为上级目录，/为根目录</span></span><br><span class="line">ls：        查看目录下内容 <span class="comment">#ls -a 查看隐藏文件，ls -l查看文件详细信息</span></span><br><span class="line">mkdir:      创建文件夹</span><br><span class="line">rmdir:      删除文件夹</span><br><span class="line">touch:      创建文件</span><br><span class="line">rm:         删除文件 <span class="comment">#rm只能删除文件，要写删除文件夹需要-rrm -rf  -i: 交互式  -f: 强制删除  -r: 递归</span></span><br><span class="line">cat,more,less 都可查看文件内容</span><br><span class="line">mv(move):   移动(剪切)文件或重命名 <span class="comment">#例 mv index.html ./demo/index.html xxx.html把index.html移动到demo目录下并重命名为xxx.html</span></span><br><span class="line">cp(copy):   复制文件也可重命名</span><br><span class="line">head:       查看文件前几行 <span class="comment">#head -5 index.html</span></span><br><span class="line">tail:       查看文件后几行</span><br><span class="line"><span class="built_in">history</span>:    查看操作历史</span><br><span class="line">wget:       下载  <span class="comment">#例 wget 地址</span></span><br><span class="line">zip:        </span><br><span class="line">tar:        压缩/解压缩 <span class="comment">#例 tar -x：解压,tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg </span></span><br><span class="line">curl:       网络请求 <span class="comment">#例 curl 地址</span></span><br><span class="line">whoami:     查看当前用户</span><br><span class="line">\&gt;和\&gt;&gt;重定向: \&gt;覆盖，\&gt;&gt;追加</span><br><span class="line">\|管道符，可以将多个命令连接使用，上一个命令的执行结果作为下一个命令的参数。</span><br><span class="line">grep:       匹配内容，可结合管道符使用</span><br><span class="line"></span><br><span class="line">tab键自动补全，多项时两下显示全部匹配项</span><br><span class="line">SSH远程登录协议，ssh 账户@地址，例 ssh root@192.168.0.1, ssh root@github.zlyll.com</span><br></pre></td></tr></table></figure><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><pre><code>Ctrl+l: 清屏，相当于clear命令；Ctrl+a：跳转至命令开始处；Ctrl+e：跳转至命令结尾处；Ctrl+c：取消命令的执行；Ctrl+u: 删除命令行首至光村所在处的所有内容；Ctrl+k: 删除光标所在处至命令行尾部的所有内容；</code></pre><h1 id="vi-vim编辑器"><a href="#vi-vim编辑器" class="headerlink" title="vi/vim编辑器"></a>vi/vim编辑器</h1><blockquote><p>一种行编辑器。<br>VIM有输入模式、编辑模式和末行模式。</p></blockquote><h2 id="打开vim"><a href="#打开vim" class="headerlink" title="打开vim"></a>打开vim</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim [OPTION]</span><br></pre></td></tr></table></figure><h2 id="模式转换"><a href="#模式转换" class="headerlink" title="模式转换"></a>模式转换</h2><blockquote><p>三种模式。 输入模式，编辑模式(命令模式)，末行模式<br>vim打开文件时，默认进入的是编辑模式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">编辑模式 --&gt; 输入模式</span><br><span class="line">    i: insert, 在光标所在前面处输入；</span><br><span class="line">    a: append, 在光标所在处后面输入；</span><br><span class="line">    o: 在当前光标所在行的下方打开一个新行；</span><br><span class="line">    I：在当前光标所在行的行首输入；</span><br><span class="line">    A：在当前光标所在行的行尾输入；</span><br><span class="line">    O：在当前光标所在行的上方打开一个新行；</span><br><span class="line"></span><br><span class="line">输入模式 --&gt; 编辑模式</span><br><span class="line">    ESC</span><br><span class="line">末行模式 --&gt; 编辑模式</span><br><span class="line">    ESC</span><br><span class="line"></span><br><span class="line">编辑模式 --&gt; 末行模式</span><br><span class="line">    :</span><br></pre></td></tr></table></figure><h2 id="关闭vim"><a href="#关闭vim" class="headerlink" title="关闭vim"></a>关闭vim</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim [OPTION]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;shell&quot;&gt;&lt;a href=&quot;#shell&quot; class=&quot;headerlink&quot; title=&quot;shell&quot;&gt;&lt;/a&gt;shell&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;命令解析器：接收用户命令，调用相应的应用程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="linux系统原理" scheme="http://yoursite.com/categories/linux%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="bash" scheme="http://yoursite.com/tags/bash/"/>
    
  </entry>
  
</feed>
